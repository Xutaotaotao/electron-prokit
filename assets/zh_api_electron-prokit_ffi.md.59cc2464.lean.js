import{_ as n,o as t,c as a,O as l}from"./chunks/framework.4a218191.js";const y=JSON.parse('{"title":"FFI","description":"electron-prokit ffi api","frontmatter":{"outline":"deep","title":"FFI","description":"electron-prokit ffi api"},"headers":[],"relativePath":"zh/api/electron-prokit/ffi.md","filePath":"zh/api/electron-prokit/ffi.md"}'),p={name:"zh/api/electron-prokit/ffi.md"};function o(e,s,r,d,c,i){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="ffi" tabindex="-1">Ffi <a class="header-anchor" href="#ffi" aria-label="Permalink to &quot;Ffi&quot;">​</a></h1><p>跨语言调用相关的 API 接口，<code>主进程</code>中使用。接入成本非常低，快捷、方便、速度快。</p><h2 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h2><p>主要是在Electron应用中调用<code>dll</code>或者<code>dylib</code>，使你可以跨语言调用一些底层插件。</p><h2 id="createepffi" tabindex="-1">createEpffi <a class="header-anchor" href="#createepffi" aria-label="Permalink to &quot;createEpffi&quot;">​</a></h2><p>创建注册方法。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createEpffi } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;electron-prokit&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> path </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;path&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 当个方法/即dylib/dll中只有暴露一个方法</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createEpffi</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  path: path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&quot;../../resources/dll/sum.dylib&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  function: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    functionName: </span><span style="color:#9ECBFF;">&quot;sum&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    returnType: </span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    inputs: [</span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 多个方法/即dylib/dll中暴露了多个方法</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">mul</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">div</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createEpffi</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  path: path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&quot;../../resources/dll/mul_and_div.dylib&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  function: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      functionName: </span><span style="color:#9ECBFF;">&quot;mul&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      returnType: </span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      inputs: [</span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      functionName: </span><span style="color:#9ECBFF;">&quot;div&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      returnType: </span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      inputs: [</span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">mul</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">div</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createEpffi } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;electron-prokit&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> path </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;path&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 当个方法/即dylib/dll中只有暴露一个方法</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createEpffi</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  path: path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&quot;../../resources/dll/sum.dylib&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  function: {</span></span>
<span class="line"><span style="color:#24292E;">    functionName: </span><span style="color:#032F62;">&quot;sum&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    returnType: </span><span style="color:#032F62;">&quot;int&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    inputs: [</span><span style="color:#032F62;">&quot;int&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;int&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">sum</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">22</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 多个方法/即dylib/dll中暴露了多个方法</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">mul</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">div</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createEpffi</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  path: path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&quot;../../resources/dll/mul_and_div.dylib&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  function: [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      functionName: </span><span style="color:#032F62;">&quot;mul&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      returnType: </span><span style="color:#032F62;">&quot;int&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      inputs: [</span><span style="color:#032F62;">&quot;int&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;int&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      functionName: </span><span style="color:#032F62;">&quot;div&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      returnType: </span><span style="color:#032F62;">&quot;int&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      inputs: [</span><span style="color:#032F62;">&quot;int&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;int&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">mul</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">22</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">div</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><table><thead><tr><th>C type</th><th>JS type</th><th>Bytes</th><th>Signedness</th><th>Note</th></tr></thead><tbody><tr><td>void</td><td>Undefined</td><td>0</td><td></td><td>Only valid as a return type</td></tr><tr><td>int8, int8_t</td><td>Number (integer)</td><td>1</td><td>Signed</td><td></td></tr><tr><td>uint8, uint8_t</td><td>Number (integer)</td><td>1</td><td>Unsigned</td><td></td></tr><tr><td>char</td><td>Number (integer)</td><td>1</td><td>Signed</td><td></td></tr><tr><td>uchar, unsigned char</td><td>Number (integer)</td><td>1</td><td>Unsigned</td><td></td></tr><tr><td>char16, char16_t</td><td>Number (integer)</td><td>2</td><td>Signed</td><td></td></tr><tr><td>int16, int16_t</td><td>Number (integer)</td><td>2</td><td>Signed</td><td></td></tr><tr><td>uint16, uint16_t</td><td>Number (integer)</td><td>2</td><td>Unsigned</td><td></td></tr><tr><td>short</td><td>Number (integer)</td><td>2</td><td>Signed</td><td></td></tr><tr><td>ushort, unsigned short</td><td>Number (integer)</td><td>2</td><td>Unsigned</td><td></td></tr><tr><td>int32, int32_t</td><td>Number (integer)</td><td>4</td><td>Signed</td><td></td></tr><tr><td>uint32, uint32_t</td><td>Number (integer)</td><td>4</td><td>Unsigned</td><td></td></tr><tr><td>int</td><td>Number (integer)</td><td>4</td><td>Signed</td><td></td></tr><tr><td>uint, unsigned int</td><td>Number (integer)</td><td>4</td><td>Unsigned</td><td></td></tr><tr><td>int64, int64_t</td><td>Number (integer)</td><td>8</td><td>Signed</td><td></td></tr><tr><td>uint64, uint64_t</td><td>Number (integer)</td><td>8</td><td>Unsigned</td><td></td></tr><tr><td>longlong, long long</td><td>Number (integer)</td><td>8</td><td>Signed</td><td></td></tr><tr><td>ulonglong, unsigned long long</td><td>Number (integer)</td><td>8</td><td>Unsigned</td><td></td></tr><tr><td>float32</td><td>Number (float)</td><td>4</td><td></td><td></td></tr><tr><td>float64</td><td>Number (float)</td><td>8</td><td></td><td></td></tr><tr><td>float</td><td>Number (float)</td><td>4</td><td></td><td></td></tr><tr><td>double</td><td>Number (float)</td><td>8</td><td></td><td></td></tr><tr><td>bool</td><td>Boolean</td><td></td><td>Usually one byte</td><td></td></tr><tr><td>long</td><td>Number (integer)</td><td>Signed</td><td>4 or 8 bytes depending on platform (LP64, LLP64)</td><td></td></tr><tr><td>ulong</td><td>Number (integer)</td><td>Unsigned</td><td>4 or 8 bytes depending on platform (LP64, LLP64)</td><td></td></tr><tr><td>unsigned long</td><td>Number (integer)</td><td>Unsigned</td><td>4 or 8 bytes depending on platform (LP64, LLP64)</td><td></td></tr><tr><td>intptr</td><td>Number (integer)</td><td>Signed</td><td>4 or 8 bytes depending on register width</td><td></td></tr><tr><td>intptr_t</td><td>Number (integer)</td><td>Signed</td><td>4 or 8 bytes depending on register width</td><td></td></tr><tr><td>uintptr</td><td>Number (integer)</td><td>Unsigned</td><td>4 or 8 bytes depending on register width</td><td></td></tr><tr><td>uintptr_t</td><td>Number (integer)</td><td>Unsigned</td><td>4 or 8 bytes depending on register width</td><td></td></tr><tr><td>str, string</td><td>String</td><td></td><td>JS strings are converted to and from UTF-8</td><td></td></tr><tr><td>str16, string16</td><td>String</td><td></td><td>JS strings are converted to and from UTF-16 (LE)</td><td></td></tr></tbody></table>`,9)]))}const u=n(p,[["render",o]]);export{y as __pageData,u as default};
