import{_ as t,o as r,c as a,O as o,X as i}from"./chunks/framework.4a218191.js";const m=JSON.parse('{"title":"简介","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/index.md","filePath":"zh/guide/index.md"}'),l={name:"zh/guide/index.md"};function n(s,e,c,d,p,h){return r(),a("div",null,e[0]||(e[0]=[o('<h1 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">提示</p><p>本指南假设你熟悉 <a href="https://www.electronjs.org/" target="_blank" rel="noreferrer">Electron</a> 和 <a href="https://vitejs.dev/" target="_blank" rel="noreferrer">Vite</a>，熟悉之后阅读本指南更加容易理解框架的设计思想。</p></div><h2 id="解决什么样的问题" tabindex="-1">解决什么样的问题 <a class="header-anchor" href="#解决什么样的问题" aria-label="Permalink to &quot;解决什么样的问题&quot;">​</a></h2><p>Electron开发在社区中有很多的解决方案，比较了一些方案，大概有这些共同的问题：</p><ul><li>繁琐的搭建Electron项目的步骤</li><li>无法自主选择前端框架</li><li>各个进程本地开发代码热更新问题</li><li>构建打包一体化配置问题</li><li>渲染进程调用无法抹平差异问题</li><li>缺少成套的企业级解决方案</li></ul><p>electron-prokit旨在解决这些问题，让你拥有极致的桌面开发体验。</p><h2 id="核心理念" tabindex="-1">核心理念 <a class="header-anchor" href="#核心理念" aria-label="Permalink to &quot;核心理念&quot;">​</a></h2><p>因为Vite 有能力同时处理 Chromium 和 Node.js这两种环境的程序的能力，所以就单独写了 <a href="https://www.npmjs.com/package/@electron-prokit/create-service" target="_blank" rel="noreferrer">@electron-prokit/create-service</a> 这个插件去读取各个进程的vite配置，然后去创建各个服务，最后再融合到一起，这样不管是哪个进程的变动都可以进行热更新处理，达到跟开发传统Web开发一样的感觉，这也大大得提高了开发效率和调试效率。</p><p><img src="'+i+'" alt="alt inner"></p><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><p>electron-prokit 严格按照<a href="https://www.electronjs.org/docs/latest/tutorial/security" target="_blank" rel="noreferrer">Electron最佳实践</a>，没有开启node集成(nodeIntegration)和关闭上下文隔离(contentIsolation)，框架内部的方法都是用contextBridge实现的。</p>',11)]))}const f=t(l,[["render",n]]);export{m as __pageData,f as default};
