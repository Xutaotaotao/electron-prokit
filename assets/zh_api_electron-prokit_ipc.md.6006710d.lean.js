import{_ as n,o as a,c as o,O as l,a2 as p}from"./chunks/framework.4a218191.js";const g=JSON.parse('{"title":"Ipc","description":"electron-prokit ipc api","frontmatter":{"outline":"deep","title":"Ipc","description":"electron-prokit ipc api"},"headers":[],"relativePath":"zh/api/electron-prokit/ipc.md","filePath":"zh/api/electron-prokit/ipc.md"}'),e={name:"zh/api/electron-prokit/ipc.md"};function t(r,s,c,i,y,E){return a(),o("div",null,s[0]||(s[0]=[l(`<h1 id="ipc" tabindex="-1">Ipc <a class="header-anchor" href="#ipc" aria-label="Permalink to &quot;Ipc&quot;">​</a></h1><p>IPC(Inter-Process Communication)是 Electron 的一个重要特性,它允许主进程与渲染进程之间,以及不同渲染进程之间的消息通信。框架在这个模块做了一些 IPC 相关的封装，让使用者更加方便使用相关的通信方法。</p><h2 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h2><p>IPC 的主要作用是在主进程和渲染进程之间传递数据和消息,实现不同进程间的通信。常见的使用场景包括:</p><ul><li>主进程需要控制渲染进程</li><li>渲染进程需要调用主进程的方法</li><li>不同页面的渲染进程间需要通信</li></ul><h2 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;初始化&quot;">​</a></h2><p>为了正常使用 IPC 模块相关的 API,需要做一些初始化工作。</p><div class="danger custom-block"><p class="custom-block-title">重要！！！</p><p>为了让尽可能多的 API 可以在主进程、渲染进程、preload 预加载脚本中无差别的使用，框架抹平了很多差异，所以如果要顺利的使用框架里面的 API，IPC 初始化非常重要。</p></div><p><strong>主进程</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 初始化</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { initIpc } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;electron-prokit&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">initIpc</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 初始化</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { initIpc } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;electron-prokit&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">initIpc</span><span style="color:#24292E;">();</span></span></code></pre></div><p><strong>preload 脚本</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 暴露注册函数</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { initExposeInMainWorld } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;electron-prokit&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">initExposeInMainWorld</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 暴露注册函数</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { initExposeInMainWorld } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;electron-prokit&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">initExposeInMainWorld</span><span style="color:#24292E;">();</span></span></code></pre></div><h2 id="api-概览" tabindex="-1">API 概览 <a class="header-anchor" href="#api-概览" aria-label="Permalink to &quot;API 概览&quot;">​</a></h2><table><thead><tr><th>函数名</th><th style="text-align:center;">使用环境</th><th style="text-align:right;">描述</th></tr></thead><tbody><tr><td>initIpc</td><td style="text-align:center;">主进程</td><td style="text-align:right;">初始化 IPC</td></tr><tr><td>onMsgFromRender</td><td style="text-align:center;">主进程</td><td style="text-align:right;">接收渲染进程消息</td></tr><tr><td>sendMsgToRender</td><td style="text-align:center;">主进程</td><td style="text-align:right;">发送消息给渲染进程</td></tr><tr><td>initExposeInMainWorld</td><td style="text-align:center;">Preload</td><td style="text-align:right;">暴露注册函数</td></tr><tr><td>onMsgFromMain</td><td style="text-align:center;">渲染进程/Preload</td><td style="text-align:right;">接收主进程消息</td></tr><tr><td>sendMsgToMain</td><td style="text-align:center;">渲染进程/Preload</td><td style="text-align:right;">发送消息给主进程</td></tr><tr><td>onMsgFromOtherRender</td><td style="text-align:center;">渲染进程/Preload</td><td style="text-align:right;">接收其他渲染进程消息</td></tr><tr><td>sendMsgToOtherRender</td><td style="text-align:center;">渲染进程/Preload</td><td style="text-align:right;">发送消息给其他渲染进程</td></tr></tbody></table><h2 id="api-使用" tabindex="-1">API 使用 <a class="header-anchor" href="#api-使用" aria-label="Permalink to &quot;API 使用&quot;">​</a></h2><h3 id="initipc" tabindex="-1">initIpc <a class="header-anchor" href="#initipc" aria-label="Permalink to &quot;initIpc&quot;">​</a></h3><p>初始化 IPC,需要在主进程中调用。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 主进程</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { initIpc } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;electron-prokit&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">initIpc</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 主进程</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { initIpc } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;electron-prokit&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">initIpc</span><span style="color:#24292E;">();</span></span></code></pre></div><h3 id="onmsgfromrender" tabindex="-1">onMsgFromRender <a class="header-anchor" href="#onmsgfromrender" aria-label="Permalink to &quot;onMsgFromRender&quot;">​</a></h3><p>在主进程中监听渲染进程发送来的消息。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 主进程</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { onMsgFromRender } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;electron-prokit&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">onMsgFromRender</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(event, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 主进程</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { onMsgFromRender } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;electron-prokit&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">onMsgFromRender</span><span style="color:#24292E;">((</span><span style="color:#E36209;">event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(event, args);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><strong>💬 参数</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">onMsgFromRender</span><span style="color:#E1E4E8;">(callback: (</span><span style="color:#FFAB70;">event</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Electron</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">IpcMainEvent</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">onMsgFromRender</span><span style="color:#24292E;">(callback: (</span><span style="color:#E36209;">event</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Electron</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">IpcMainEvent</span><span style="color:#24292E;">, </span><span style="color:#E36209;">args</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;">)</span></span></code></pre></div><ul><li><p>callback:回调函数,包含两个参数</p><ul><li>event: ipcMain 事件对象</li><li>args: 渲染进程发送来的参数</li></ul></li></ul><h3 id="sendmsgtorender" tabindex="-1">sendMsgToRender <a class="header-anchor" href="#sendmsgtorender" aria-label="Permalink to &quot;sendMsgToRender&quot;">​</a></h3><p>主进程发送消息给渲染进程。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 主进程</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { sendMsgToRender } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;electron-prokit&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">sendMsgToRender</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;mainWin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Hello&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 主进程</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { sendMsgToRender } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;electron-prokit&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">sendMsgToRender</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;mainWin&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Hello&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p><strong>💬 参数</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sendMsgToRender</span><span style="color:#E1E4E8;">(windowName: string, msg: any)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sendMsgToRender</span><span style="color:#24292E;">(windowName: string, msg: any)</span></span></code></pre></div><ul><li>windowName: 发送消息的目标窗口名称</li><li>msg: 发送的消息内容</li></ul><h3 id="initexposeinmainworld" tabindex="-1">initExposeInMainWorld <a class="header-anchor" href="#initexposeinmainworld" aria-label="Permalink to &quot;initExposeInMainWorld&quot;">​</a></h3><p>在 Preload 脚本中暴露注册函数。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Preload 脚本</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { initExposeInMainWorld } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;electron-prokit&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">initExposeInMainWorld</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Preload 脚本</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { initExposeInMainWorld } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;electron-prokit&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">initExposeInMainWorld</span><span style="color:#24292E;">();</span></span></code></pre></div><h3 id="onmsgfrommain" tabindex="-1">onMsgFromMain <a class="header-anchor" href="#onmsgfrommain" aria-label="Permalink to &quot;onMsgFromMain&quot;">​</a></h3><p>监听主进程发送过来的消息。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 渲染进程或 Preload 脚本</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { onMsgFromMain } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;electron-prokit&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">onMsgFromMain</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(event, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 渲染进程或 Preload 脚本</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { onMsgFromMain } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;electron-prokit&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">onMsgFromMain</span><span style="color:#24292E;">((</span><span style="color:#E36209;">event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(event, args);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><strong>💬 参数</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">onMsgFromMain</span><span style="color:#E1E4E8;">(callback: (</span><span style="color:#FFAB70;">event</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Electron</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">IpcRendererEvent</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">onMsgFromMain</span><span style="color:#24292E;">(callback: (</span><span style="color:#E36209;">event</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Electron</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">IpcRendererEvent</span><span style="color:#24292E;">, </span><span style="color:#E36209;">args</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;">)</span></span></code></pre></div><ul><li>callback:回调函数,包含两个参数 <ul><li>event: ipcRenderer 事件对象</li><li>args: 主进程发送来的参数</li></ul></li></ul><h3 id="sendmsgtomain" tabindex="-1">sendMsgToMain <a class="header-anchor" href="#sendmsgtomain" aria-label="Permalink to &quot;sendMsgToMain&quot;">​</a></h3><p>发送消息给主进程。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 渲染进程或 Preload 脚本</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { sendMsgToMain } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;electron-prokit&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">sendMsgToMain</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello main&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(res);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 渲染进程或 Preload 脚本</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { sendMsgToMain } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;electron-prokit&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">sendMsgToMain</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello main&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><strong>💬 参数</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sendMsgToMain</span><span style="color:#E1E4E8;">(msg: any)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sendMsgToMain</span><span style="color:#24292E;">(msg: any)</span></span></code></pre></div><ul><li>msg: 发送的消息内容</li></ul><h3 id="onmsgfromotherrender" tabindex="-1">onMsgFromOtherRender <a class="header-anchor" href="#onmsgfromotherrender" aria-label="Permalink to &quot;onMsgFromOtherRender&quot;">​</a></h3><p>监听其他渲染进程发送的消息。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 渲染进程或 Preload 脚本</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { onMsgFromOtherRender } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;electron-prokit&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">onMsgFromMain</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(event, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 渲染进程或 Preload 脚本</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { onMsgFromOtherRender } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;electron-prokit&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">onMsgFromMain</span><span style="color:#24292E;">((</span><span style="color:#E36209;">event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(event, args);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><strong>💬 参数</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">onMsgFromOtherRender</span><span style="color:#E1E4E8;">(callback: (</span><span style="color:#FFAB70;">event</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Electron</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">IpcRendererEvent</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">onMsgFromOtherRender</span><span style="color:#24292E;">(callback: (</span><span style="color:#E36209;">event</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Electron</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">IpcRendererEvent</span><span style="color:#24292E;">, </span><span style="color:#E36209;">args</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;">)</span></span></code></pre></div><ul><li>callback:回调函数,包含两个参数 <ul><li>event: ipcRenderer 事件对象</li><li>args: 主进程发送来的参数</li></ul></li></ul><h3 id="sendmsgtootherrender" tabindex="-1">sendMsgToOtherRender <a class="header-anchor" href="#sendmsgtootherrender" aria-label="Permalink to &quot;sendMsgToOtherRender&quot;">​</a></h3><p>发送消息给其他渲染进程。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 渲染进程或 Preload 脚本</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { sendMsgToOtherRender } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;electron-prokit&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">sendMsgToOtherRender</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;work&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Hello work&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 渲染进程或 Preload 脚本</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { sendMsgToOtherRender } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;electron-prokit&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">sendMsgToOtherRender</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;work&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Hello work&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p><strong>💬 参数</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sendMsgToOtherRender</span><span style="color:#E1E4E8;">(windowName:string,msg:any)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sendMsgToOtherRender</span><span style="color:#24292E;">(windowName:string,msg:any)</span></span></code></pre></div><ul><li>windowName: 发送消息的目标窗口名称</li><li>msg: 发送的消息内容</li></ul><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p><a href="https://github.com/Xutaotaotao/electron-prokit/blob/main/play/src/render/pages/ipc.tsx" target="_blank" rel="noreferrer">点击查看示例源码</a></p><p><img src="`+p+'" alt="alt ipc"></p>',60)]))}const h=n(e,[["render",t]]);export{g as __pageData,h as default};
